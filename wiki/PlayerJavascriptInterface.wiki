#summary Work with the player using javascript
#labels Featured

== Introduction ==

This article explains the usage of javascript interface of the player object.


== Java Script interface utilities ==
The description of crucial issues in the qtiplayer JS interface.

=== + Navigation ===
Navigation is the control over the Assessment Session and Assessment Item Session flows. Can be done when the _EngineMode_ is _RUNNING_.

=== + Engine Mode ===
Mode control provides the information about the player operation. It could carry the String values as follows:

_NONE_ – player does not function, 

_ASSESSMENT_LOADING_ – delivery engine is loading the assessment file, 

_ASSESSMENT_LOADED_ – the Assessment file has been loaded, history initialized, time counting started, 

_ITEM_LOADING_ – the delivery engine is loading the Assessment Item (first or subsequent), 

_ITEM_LOADED_ – the Assessment Item file has been loaded, the state for the Item has been loaded, 

_RUNNING_ – the Assessment is running, awaiting for the user action; this is the only state that enables the navigation through the assessment items.

_FINISHED_ – the Assessment has been finished;

=== + Assessment Session State ===
Assessment session state control concerns the management over the content introduced by the user. The state *cannot* be controlled if the _Engine Mode_ is _NONE or _ASSESSMENT_LOADING_ .

=== + Assessment Session Report ===
Provides the information about the current Assessment and Item Sessions features.




== HTML/javascript usage example: ==
{{{
<script type="text/javascript" language="javascript" src="scorm/APIWrapper.js"></script>
<script language="javascript">
  function qpOnAppLoaded(){
    // Load assessment
    var player = qpCreatePlayer('player');
    player.load('content/test.xml');

    // implement this functions in order to catch 
    // session events
 
    player1.onAssessmentSessionBegin = function(){
      // called after the Asssessment Session is begun
      alert("Assessment Session begin");
    }

    *// note the change onAssessmentFinished -> onAssessmentSessionFinished*
    player1.onAssessmentSessionFinished = function(){
      // called after the Assessment Session is finished
      alert("Assessment Session finished");
    }
    player1.onItemSessionBegin = function(){
      // called after each Item Session is begun
      alert("Item Session begin");
    }
    player1.onItemSessionFinished = function(){
      // called after each Item Session is finished
      alert("Item Session finished");
    }
  }

  function managePlayer(){

    // move to the next item
    player.navigateNextItem();

    // move to the previous item
    player.navigatePreviousItem();

    // finish current Item Session (and show feedback)
    player.navigateFinishItem();

    // finish the Assessment Session
    player.navigateFinishAssessment();

    // reset the answers and results for current item (and hide feedback)
    player.navigateResetItem();


    // get player engine mode
    var engineMode = player.getEngineMode().toString();
    if (engineMode == "RUNNING"){
      alert("Engine is running");
    }


    // implement this to get or set the Assessment Session state
    var state = player.getState();
    player.setState(state);


    // use this to get Assessment Session time (in seconds)
    var time = player.getAssessmentSessionReport().getTime();
  }

</script>
}}}